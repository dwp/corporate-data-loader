name: 'Pull Request'
on:
  pull_request:
    branches:
      - master

jobs:
  get-publish-version:
    runs-on: ubuntu-latest
    outputs:
      publish-version: ${{ steps.get-publish-version.outputs.publish-version }}
    steps:
      - name: Get publish version
        id: get-publish-version
        run: |
          LATEST_VERSION=$(curl --silent "https://api.github.com/repos/${{ github.repository }}/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
          [  -z "$LATEST_VERSION" ] && LATEST_VERSION="0.0.0"
          VERSION=$(echo $LATEST_VERSION | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
          echo "::set-output name=publish-version::${VERSION}"

  build-app:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: java setup
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: build and test
        run: METADATA_STORE_USE_AWS_SECRETS=false gradle build
      - name: Upload app
        uses: actions/upload-artifact@v2
        with:
          name: built-app
          path: build/libs

  publish-github-release:
    runs-on: ubuntu-latest
    needs: [get-publish-version, build-app]
    steps:
      - name: Checkout code
        uses: actions/checkout@master
      - name: Download built app
        uses: actions/download-artifact@v2
        with:
          name: built-app
          path: build
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.get-publish-version.outputs.publish-version }}
          release_name: Release ${{ needs.get-publish-version.outputs.publish-version }}
          draft: false
          prerelease: false
      - name: check dir
        run: |
          ls -la
          ls -la ./build
          ls -la ./build/libs
